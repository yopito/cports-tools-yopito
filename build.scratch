#! /bin/bash
#
# purpose: build chimera package(s) using a fresh build env for each of them.
#          store in log files: build output, generated packages data.
#
# (todo) apk3: can't list package file content (not tar format anymore)
#        wait for https://gitlab.alpinelinux.org/alpine/apk-tools/-/issues/7103
# (todo) on fails build, some (required) package(s) may have been produced.
# (todo) package list from git: package list several time if several commits on its template.py file
# (todo) package list from git: handle renamed files too
# (todo) if failure on (main) package build, don't exit too early:
#        have to check dump packages that may have been built before failure.
# (todo) missing cbuild options in folder's name
# (todo) apkroot_create(): use exec_or_dry(), control return code
# (todo) exec_or_dry(): add silent mode
# (todo) cbuild does not expose (yet) any of its parameters: have to parse
#        build output, can't compute order of package to build.
# (todo) use a temporary masterdir ?
# (todo) order packages to build by their dependency
# (todo) option to build for several arch at once
#
# 20220507 add cbuild dump on top of build.log
# 20220315 cleanup apk root generation for apk3 (git)
# 20211123 handle staging repo
# 20210902 generated subpkg info: handle arch of generated package (fix)
# 20210829 info file for each build or generated (sub)packages
# 20210814 initial revision

usage() {
cat << EOFusage

Usage: $0 [-n] [-h] [cbuild_flags] [pkg1 [pkg2 ] ... ]

  -n            dry run
  -h            this help
  cbuild_flags  QUOTE THEM if any (like '-a <arch> -m <dir> ...')
  pkg1 pkg2 ... list of package(s) to build or retrieved from git

  Each package is built one by one in a fresh masterdir,
  #not yet# ordered by their dependency order.
  If no package are requested, retrieve the list of them from git against the
  master branch.
  Build output and package(s) infos are stored in timestamped log files.
  Stop on the first error (if several packages requested)

  Examples:

    * build main/foo package for native arch:
      $0 main/foo

    * crossbuild main/foo package for riscv64 target arch:
      $0 '-a riscv64' main/foo

    * crossbuild all package in current git branch for aarch64:
      $0 '-a aarch64'

    * check output of build log(s) in the meantime:
      $ watch -n 5 "ls -1tr log/*/*.log | tail -n 3 | xargs du -sk && echo && ls -1tr log/*/*.log | tail -n 1 | xargs tail"
EOFusage
}

exec_or_dry() {
  # $1: command to execute
  # $2: do not exit if set and command returns != 0
  if [ "$DRY" = 1 ]; then
    echo "# dry cmd: $1"
    return 0
  fi
  echo "# cmd: $1"
  eval "$1"
  if [ $? -ne 0 ]; then
    echo "# cmd FAILED"
    if  [ -z "$2" ]; then
      echo "# exiting requested: stop here"
      exit 1
    fi
  fi
}

apkroot_create() {
  if [ "$1" = "" ]; then
    echo "[ERROR] usage: apkroot_create /path/to/create"
    return 1
  fi
  mkdir -p "${1}/etc/apk"
  mkdir -p "${1}/lib/apk/db"
  touch "${1}/etc/apk/world"
  touch "${1}/lib/apk/db/installed"
  # need this if apk built with /usr/lib instead of /lib
  #mkdir -p "{1}/usr"
  #ln -s "${1}/lib" "${1}/usr/lib"
}

## start
DRY=
PKGlist=
Bargs=
ts="$(date '+%Y-%m-%d_%H%M%S')"

exec_or_dry "test -x ./cbuild"

[ ! -d "log" ] && ( echo "creating log/ ..." ; mkdir log )

# handle command line arguments
for arg; do
  case $arg in
    -n)        DRY=1 ;;
    -h|--help) usage && exit 0 ;;
    -*)        Bargs="$Bargs $arg" ;;
    *)         PKGlist="$PKGlist $arg"
  esac
done

# lstrip space
Bargs="${Bargs# }"

echo
echo "# input cbuild args: $Bargs"

# retrieve target arch
tarch="${Bargs#*-a }"
tarch="${tarch#*--arch }"
if [ "$tarch" = "${Bargs}" ]; then
  tarch="$(uname -m)"
else
  tarch="${tarch%% *}"
fi

echo "# package(s) requested to build: $PKGlist"
if [ "$PKGlist" = "" ]
then
  echo "# no package requested: retrieve ordered list against git master branch ..."
  PKGlist=$(git log --oneline --name-status master.. |
            grep -F /template.py | grep "^[AM]" | awk '{print $2}' |
            tac | xargs -r -n 1 dirname | tr '\n' ' '
           )
fi
echo "# package(s) to build: $PKGlist"
echo "# XXX packages are not ordered by their build depedency yet"

# loop on each package to build
for pkg in $PKGlist; do
  echo
  exec_or_dry "test -f ${pkg}/template.py"

  # pkgname in the form <dir>/<pkg>
  LOGdir="log/${ts}.${pkg/\//.}.${tarch}"
  LOGf="${LOGdir}/build.log"

  echo "# [$pkg] create a fresh masterdir ..."
  exec_or_dry "./cbuild zap"
  exec_or_dry "./cbuild binary-bootstrap > /dev/null"

  echo "# [$pkg] build logfile: $LOGf"
  exec_or_dry "mkdir -p $(dirname $(realpath -m $LOGf))"
  exec_or_dry "echo '## cbuild dump ${pkg}' > ${LOGf}"
  exec_or_dry "(2>&1 ./cbuild --no-color ${Bargs} dump ${pkg}) >> ${LOGf}"
  exec_or_dry "echo '## cbuild pkg ${pkg}' >> ${LOGf}"
  exec_or_dry "(2>&1 PYTHONUNBUFFERED=1 ./cbuild --force --no-color ${Bargs} pkg ${pkg}) >> ${LOGf}"

  # create a temp apkroot (to scan content of generated packages)
  apkroot="$(mktemp -d /tmp/apkroot.XXXXXXXX)"
  apkroot_create ${apkroot}

  # retrieve generated package(s) and their repo.
  # From build log since cbuild does not provide this info.
  # However, this will catch any other package that had to be rebuilt
  pkgraw="$( grep -E '^=> Creating .+ in repository .+' ${LOGf})"
  if [ "${pkgraw}" = "" ]; then
    echo "[ERROR] found no generated packge in ${LOGf}"
    rm -rf ${apkroot}
    exit 1
  fi

  # loop on subpackages, possibly with different repos and arch
  # XXX detect skipped (invalid) list item
  echo "${pkgraw}" | awk '{print $3,$6}' | sed -e 's,\.\.\.$,,'  \
  | while read rawspkg rawrepo; do
    spkg_arch="$(basename $rawrepo)"
    spkg_repo="$(dirname $rawrepo)"
    spkg_repo_nostage="${spkg_repo%/.stage}"
    # strip package extension, revision and version
    spkg_name=${rawspkg%.apk}
    spkg_name=${spkg_name%-r*}
    spkg_name=${spkg_name%-*}

    # unstage: package file has been produced but does not exist (anymore) in
    # staging repo: so has been moved into main repo
    if [ ! -f "${rawrepo}/${rawspkg}" ]; then
      if [ -f "${spkg_repo_nostage}/${spkg_arch}/${rawspkg}" ]; then
        spkg_repo="${spkg_repo_nostage}"
      else
        echo "[ERROR] package file not found (staged or unstaged): ${rawrepo}/${rawspkg}"
        continue
      fi
    fi

    spkg_log="${LOGdir}/${spkg_name}.${spkg_arch}.apk.info"

    echo "# [$pkg] dump subpkg $spkg_name info into ${spkg_log}"

    echo "# apk metadata info" >> ${spkg_log}
    apkopt="--root ${apkroot} --arch ${spkg_arch} --allow-untrusted --repository ${spkg_repo}"
    exec_or_dry "apk ${apkopt} info -a ${spkg_name} >> ${spkg_log}"

    # apk lists files only of installed packages, so let's use tar
    # tar output: file timestamp is not relevant
    echo "# package listing: not available for now (apk3)" >> ${spkg_log}
    #apk2# exec_or_dry "2> /dev/null tar tzvf ${spkg_repo}/${spkg_arch}/${rawspkg} | column -t -H 4,5 -R 3 >> ${spkg_log}"
  done
  rm -rf ${apkroot}
done
echo "# That's all folks !"
